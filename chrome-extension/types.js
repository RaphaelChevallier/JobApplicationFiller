/**
 * Type definitions for the Chrome extension
 * These are JSDoc types that can be used for documentation and editor support
 */

/**
 * @typedef {Object} JobApplication
 * @property {string} [id] - UUID (generated by Supabase)
 * @property {string} user_id - UUID of the user
 * @property {string} job_url - URL of the job posting
 * @property {string} [job_title] - Title of the job
 * @property {string} [company_name] - Name of the company
 * @property {string} [job_description] - Description of the job
 * @property {string} [job_location] - Location of the job
 * @property {string} [job_posting_date] - Date the job was posted
 * @property {string} [job_id] - External ID of the job
 * @property {string} [application_date] - Date the job was applied to (defaults to now)
 * @property {string} [application_status] - Status of the application (defaults to 'applied')
 * @property {string} [notes] - Notes about the application
 * @property {string} [salary_info] - Salary information for the job
 */

/**
 * @typedef {Object} ApplicationContent
 * @property {string} [id] - UUID (generated by Supabase)
 * @property {string} job_application_id - UUID of the job application
 * @property {string} [resume_used] - URL to the specific resume used
 * @property {string} [cover_letter_used] - URL or content of the cover letter used
 * @property {Object} [answers_provided] - JSON object storing form field IDs and the answers provided
 * @property {Object} [custom_fields] - Any additional custom fields/responses
 */

/**
 * Function to save a job application to Supabase
 * 
 * @param {Object} supabaseClient - Supabase client instance
 * @param {JobApplication} jobApplication - Job application data to save
 * @returns {Promise<Object>} - Result of the insert operation
 */
export async function saveJobApplication(supabaseClient, jobApplication) {
  // Verify the user is logged in
  const { data: { user }, error: authError } = await supabaseClient.auth.getUser();
  
  if (authError || !user) {
    throw new Error('User not authenticated');
  }

  // Add user_id to the job application
  const jobData = {
    ...jobApplication,
    user_id: user.id,
  };

  // Insert job application into Supabase
  const { data, error } = await supabaseClient
    .from('job_applications')
    .insert(jobData)
    .select()
    .single();

  if (error) {
    console.error('Error saving job application:', error);
    throw error;
  }

  return data;
}

/**
 * Function to save application content to Supabase
 * 
 * @param {Object} supabaseClient - Supabase client instance
 * @param {string} jobApplicationId - ID of the job application
 * @param {ApplicationContent} applicationContent - Application content data to save
 * @returns {Promise<Object>} - Result of the insert operation
 */
export async function saveApplicationContent(supabaseClient, jobApplicationId, applicationContent) {
  // Verify the user is logged in
  const { data: { user }, error: authError } = await supabaseClient.auth.getUser();
  
  if (authError || !user) {
    throw new Error('User not authenticated');
  }

  // Add job_application_id to the application content
  const contentData = {
    ...applicationContent,
    job_application_id: jobApplicationId,
  };

  // Insert application content into Supabase
  const { data, error } = await supabaseClient
    .from('application_content')
    .insert(contentData)
    .select()
    .single();

  if (error) {
    console.error('Error saving application content:', error);
    throw error;
  }

  return data;
} 